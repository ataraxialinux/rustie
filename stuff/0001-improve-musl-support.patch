From 4852ce9e415d6f95320354b61ea5d326dbc163ee Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Thu, 28 May 2020 02:05:57 +0900
Subject: [PATCH] improve musl support

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 src/bootstrap/compile.rs                    | 16 ----------------
 src/librustc_target/spec/linux_musl_base.rs |  2 +-
 src/libstd/build.rs                         |  2 ++
 src/libunwind/build.rs                      | 14 +-------------
 src/libunwind/lib.rs                        |  2 +-
 vendor/libc/src/unix/mod.rs                 |  7 -------
 6 files changed, 5 insertions(+), 38 deletions(-)

diff --git a/src/bootstrap/compile.rs b/src/bootstrap/compile.rs
index 65a00db33..0c3676858 100644
--- a/src/bootstrap/compile.rs
+++ b/src/bootstrap/compile.rs
@@ -125,22 +125,6 @@ fn copy_third_party_objects(
         target_deps.push(target);
     };
 
-    // Copies the crt(1,i,n).o startup objects
-    //
-    // Since musl supports fully static linking, we can cross link for it even
-    // with a glibc-targeting toolchain, given we have the appropriate startup
-    // files. As those shipped with glibc won't work, copy the ones provided by
-    // musl so we have them on linux-gnu hosts.
-    if target.contains("musl") {
-        let srcdir = builder.musl_root(target).unwrap().join("lib");
-        for &obj in &["crt1.o", "crti.o", "crtn.o"] {
-            copy_and_stamp(&srcdir, obj);
-        }
-    } else if target.ends_with("-wasi") {
-        let srcdir = builder.wasi_root(target).unwrap().join("lib/wasm32-wasi");
-        copy_and_stamp(&srcdir, "crt1.o");
-    }
-
     // Copies libunwind.a compiled to be linked with x86_64-fortanix-unknown-sgx.
     //
     // This target needs to be linked to Fortanix's port of llvm's libunwind.
diff --git a/src/librustc_target/spec/linux_musl_base.rs b/src/librustc_target/spec/linux_musl_base.rs
index e294e6398..17fecb3b2 100644
--- a/src/librustc_target/spec/linux_musl_base.rs
+++ b/src/librustc_target/spec/linux_musl_base.rs
@@ -26,7 +26,7 @@ pub fn opts() -> TargetOptions {
     base.post_link_objects_crt.push("crtn.o".to_string());
 
     // These targets statically link libc by default
-    base.crt_static_default = true;
+    base.crt_static_default = false;
     // These targets allow the user to choose between static and dynamic linking.
     base.crt_static_respected = true;
 
diff --git a/src/libstd/build.rs b/src/libstd/build.rs
index 8db7bc12c..77ae0541e 100644
--- a/src/libstd/build.rs
+++ b/src/libstd/build.rs
@@ -11,6 +11,8 @@ fn main() {
             println!("cargo:rustc-link-lib=dl");
             println!("cargo:rustc-link-lib=rt");
             println!("cargo:rustc-link-lib=pthread");
+        } else {
+            println!("cargo:rustc-link-lib=ssp_nonshared");
         }
     } else if target.contains("freebsd") {
         println!("cargo:rustc-link-lib=execinfo");
diff --git a/src/libunwind/build.rs b/src/libunwind/build.rs
index a24808b32..29292cd46 100644
--- a/src/libunwind/build.rs
+++ b/src/libunwind/build.rs
@@ -10,10 +10,7 @@ fn main() {
         // Build the unwinding from libunwind C/C++ source code.
         llvm_libunwind::compile();
     } else if target.contains("linux") {
-        if target.contains("musl") {
-            // linking for musl is handled in lib.rs
-            llvm_libunwind::compile();
-        } else if !target.contains("android") {
+        if !target.contains("android") {
             println!("cargo:rustc-link-lib=gcc_s");
         }
     } else if target.contains("freebsd") {
@@ -105,15 +102,6 @@ mod llvm_libunwind {
             cfg.file(root.join("src").join(src));
         }
 
-        if target_env == "musl" {
-            // use the same C compiler command to compile C++ code so we do not need to setup the
-            // C++ compiler env variables on the builders
-            cfg.cpp(false);
-            // linking for musl is handled in lib.rs
-            cfg.cargo_metadata(false);
-            println!("cargo:rustc-link-search=native={}", env::var("OUT_DIR").unwrap());
-        }
-
         cfg.compile("unwind");
     }
 }
diff --git a/src/libunwind/lib.rs b/src/libunwind/lib.rs
index 18d41be77..17f73d69b 100644
--- a/src/libunwind/lib.rs
+++ b/src/libunwind/lib.rs
@@ -19,7 +19,7 @@ cfg_if::cfg_if! {
 }
 
 #[cfg(target_env = "musl")]
-#[link(name = "unwind", kind = "static", cfg(target_feature = "crt-static"))]
+#[link(name = "gcc_eh", cfg(target_feature = "crt-static"))]
 #[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
 extern "C" {}
 
diff --git a/vendor/libc/src/unix/mod.rs b/vendor/libc/src/unix/mod.rs
index 238da24b5..1cbe84b36 100644
--- a/vendor/libc/src/unix/mod.rs
+++ b/vendor/libc/src/unix/mod.rs
@@ -298,13 +298,6 @@ cfg_if! {
     } else if #[cfg(feature = "std")] {
         // cargo build, don't pull in anything extra as the libstd dep
         // already pulls in all libs.
-    } else if #[cfg(target_env = "musl")] {
-        #[cfg_attr(feature = "rustc-dep-of-std",
-                   link(name = "c", kind = "static",
-                        cfg(target_feature = "crt-static")))]
-        #[cfg_attr(feature = "rustc-dep-of-std",
-                   link(name = "c", cfg(not(target_feature = "crt-static"))))]
-        extern {}
     } else if #[cfg(target_os = "emscripten")] {
         #[link(name = "c")]
         extern {}
-- 
2.26.2

